openapi: 3.0.3
info:
  title: Team Dev Server API (C8 & C9)
  description: |-
  version: 0.2.2

servers:
  - url: https://team-dev-server-c8-c9.fly.dev/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
    get:
      tags:
        - user
      summary: Get all users by first name,last name, role and/or cohortId if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name *?firstName=Joe*
          schema:
            type: string
        - name: lastName
          in: query
          description: Search all users by last name and/or role *?lastName=Blogg*
          schema:
            type: string
        - name: role
          in: query
          description: Search all users by role if provided (case-insensitive, either 'student' or 'teacher')
          schema:
            type: string
        - name: cohortId
          in: query
          description: Search all users by cohortId if provided
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '401':
          description: unauthorised request (invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: query parameter(s) does not include a value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  pattern: ' Must be at least 1 character'
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - post
      summary: Delete post
      description: Teachers can delete any post, students can only delete their own.
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the post that is to be deleted.'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedPost'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: A post with this Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Invalid permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - post
      summary: Edit posts
      description: A user can only update their own posts.
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the post that is to be Updated.'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedPost'
        400:
          description: No content has been provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: A post with this Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Invalid permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/:id/likes:
    post:
      tags:
        - post
      summary: Liking a single post
      description: This can only be liked once by a logged in user.
      operationId: createLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the post that is to be liked'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPost'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all likes for a post
      description: get all likes
      operationId: getPostLikes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the post that we want to get the likes from'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPost'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/:id/comments:
    get:
      tags:
        - comment
      summary: Get all comments for a post
      description: get all comments
      operationId: getPostComments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the post that we want to get the comments from'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllComments'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/:id/likes/:id:
    delete:
      tags:
        - post
      summary: Delete a single like on a post
      description: A logged in user can delete their like on a post
      operationId: deleteLike
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The id of the post that we want to delete the like from'
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: 'The id of the users like that we want to delete'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'The user has not liked this post yet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/:postId/comments/:commentId/likes:
    post:
      tags:
        - comment
      summary: Liking a single comment
      description: This can only be liked once by a logged in user
      operationId: createLike
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The id of the post that the comment is on'
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: 'The id of the comment that the user will be liking'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedComment'
        400:
          description: fail - 'User has already liked this comment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: fail - 'Post with given id not found'/'Comment with given id not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/:postId/comments/:commentId/likes/:userId:
    delete:
      tags:
        - comment
      summary: Delete a single like on a comment
      description: A logged in user can delete their like on a comment
      operationId: deleteLike
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The id of the post that the comment is attached to'
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: 'The id of the comment that we want to delete the like from'
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: "The id of the user's like that we want to delete"
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        400:
          description: Generic fail - read error message for more detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: fail - 'User cannot delete someone else's like'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: fail - 'User has not liked this comment'/'User/Post/Comment with given id not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      requestBody:
        description: Create cohort object (Student cannot create cohort object)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCohort'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedCohort'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden (Students cannot create cohort)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - cohort
      summary: Get all cohorts
      description: This can only be done by the logged in user with role TEACHER.
      operationId: getCohorts
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK (successful operation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCohorts'
        401:
          description: Unauthorised(only a teacher is authorised to get all cohorts )
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cohorts/{cohortId}:
    delete:
      tags:
        - cohort
      summary: Delete cohort by id
      description: Only Teachers can Delete cohorts.
      operationId: deleteCohort
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The id of the cohort that is to be deleted.'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedCohort'
        404:
          description: A cohort with this Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Invalid permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    CreateCohort:
      type: object
      required: [cohortName, startDate, endDate]
      properties:
        cohortName:
          type: string
        startDate:
          type: string
          format: date
          pattern: YYYY/MM/DD
        endDate:
          type: string
          format: date
          pattern: YYYY/MM/DD

    CreatedCohort:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            cohort:
              type: object
              required: [cohortName, startDate, endDate]
              properties:
                id:
                  type: integer
                cohortName:
                  type: string
                startDate:
                  type: string
                  format: date
                  pattern: YYYY/MM/DD
                endDate:
                  type: string
                  format: date
                  pattern: YYYY/MM/DD
    AllCohorts:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            cohorts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  cohortName:
                    type: string
                  startDate:
                    type: string
                    format: date
                    pattern: YYYY-MM-DD
                  endDate:
                    type: string
                    format: date
                    pattern: YYYY-MM-DD
    DeletedCohort:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            deletedCohort:
              properties:
                id:
                  type: integer
                cohortName:
                  type: string
                startDate:
                  type: string
                  format: date
                  pattern: YYYY-MM-DD
                endDate:
                  type: string
                  format: date
                  pattern: YYYY-MM-DD

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
    AllComments:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        postId:
          type: integer
        content:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        specialism:
          type: string
        phone:
          type: string
        profileImageUrl:
          type: string

    CreateUser:
      type: object
      required: [email, password]
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        biography:
          type: string
        githubUrl:
          type: string
        password:
          type: string
          minLength: 8
          pattern: '1 lower, 1 upper, 1 number, 1 special character ( {, }, [, ], &, :, *, #, ?, |. -, <. >, =, !, %, @, \ )'
        specialism:
          type: string
        phone:
          type: string
        profileImageUrl:
          type: string
    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        biography:
          type: string
        githubUrl:
          type: string
        specialism:
          type: string
        phone:
          type: string
        profileImageUrl:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  userId:
                    type: integer
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      role:
                        type: string
                      cohortId:
                        type: integer
                      profile:
                        type: object
                        properties:
                          id:
                            type: integer
                          userId:
                            type: integer
                          firstName:
                            type: string
                          lastName:
                            type: string
                          bio:
                            type: string
                          githubUrl:
                            type: string
                          specialism:
                            type: string
                          phone:
                            type: string
                          profileImageUrl:
                            type: string
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  likes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                        role:
                          type: string
                        cohortId:
                          type: integer

    DeletedPost:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            deletedPost:
              properties:
                id:
                  type: integer
                content:
                  type: string
                userId:
                  type: integer
                createdAt:
                  type: string
                updatedAt:
                  type: string
    UpdatedPost:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            updatedPost:
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                content:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
                user:
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                    role:
                      type: string
                    cohortId:
                      type: integer
                    profile:
                      properties:
                        id:
                          type: integer
                        userId:
                          type: integer
                        firstName:
                          type: string
                        lastName:
                          type: string
                        bio:
                          type: string
                        githubUrl:
                          type: string

    LikedPost:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                content:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
                likes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      role:
                        type: string
                      cohortId:
                        type: integer

    LikedComment:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            comment:
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                content:
                  type: string
                createdAt:
                  type: string
                updatedAt:
                  type: string
                likes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      role:
                        type: string
                      cohortId:
                        type: integer

    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                biography:
                  type: string
                githubUrl:
                  type: string
                specialism:
                  type: string
                phone:
                  type: string
                profileImageUrl:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
                specialism:
                  type: string
                phone:
                  type: string
                profileImageUrl:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
