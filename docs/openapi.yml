openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: 1.0

servers:
  - url: http://localhost:4000/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
  - name: comment

paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - user
      summary: Get all users by name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Search all users by name if provided, can be full name or only last or first name
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohort_id or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - user
      summary: Delete a user by ID
      description: Removes a user from the system using their unique identifier
      operationId: deleteById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    delete:
      tags:
        - post
      summary: Delete a post
      description: Delete a post by its ID. This action can only be performed by the post owner or an admin.
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to delete
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Post deleted successfully
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      /posts/{id}:
    get:
      tags:
        - post
      summary: Get a post by ID
      description: Retrieve a single post by its ID, including associated user details. This action can only be performed by a logged-in user.
      operationId: getPostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}/comments:
    post:
      tags:
        - comment
      summary: Create a comment for a post
      description: Create a new comment associated with a specific post
      operationId: createComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
      requestBody:
        description: Comment creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                userId:
                  type: integer
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    get: # Added GET method to retrieve comments
      tags:
        - comment
      summary: Get all comments for a post
      description: Retrieve all comments associated with a specific post.
      operationId: getCommentsForPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to retrieve comments for
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    properties:
                      comments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Comments not found for the specified post
  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohort_id:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Cohort'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cohorts/{id}/users:
    get:
      tags:
        - cohort
      summary: Get all users in a cohort by the cohorts id
      description: Get all users in a cohort by the cohorts id
      operationId: getById
      parameters:
        - name: id
          in: path
          description: The id of the cohort to get users from
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Users'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string

    Comment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        postId:
          type: integer
        author:
          type: object
          properties:
            id:
              type: integer
            cohortId:
              type: integer
              nullable: true
            firstName:
              type: string
              nullable: true
            lastName:
              type: string
              nullable: true
            email:
              type: string
            bio:
              type: string
              nullable: true
            githubUrl:
              type: string
              nullable: true
            role:
              type: string
              enum: [STUDENT, TEACHER]

    # TODO: FIX THIS TYPE (duplicate status in each User)
    Users:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUsername:
          type: string
        password:
          type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohort_id:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUsername:
          type: string
        mobile:
          type: string
        specialism:
          type: string
        imageUrl:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohort_id:
                        type: integer
                      role:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      bio:
                        type: string
                      githubUsername:
                        type: string
                      profileImageUrl:
                        type: string

    User:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohort_id:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUsername:
                  type: string
                mobile:
                  type: string
                specialism:
                  type: string
                imageUrl:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohort_id:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUsername:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohort_id:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
