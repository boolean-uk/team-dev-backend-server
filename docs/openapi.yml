openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: "1.0"

servers:
  - url: "http://localhost:4000/"
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log

paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: Invalid email/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - user
      summary: Get all users by first name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name if provided (case-sensitive and exact string matches only)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '400':
          description: Invalid username/password supplied
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The ID of the user to fetch.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with STUDENT role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user ID that needs to be updated.'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid email/password/profile information supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged-in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: Get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    get:
      tags:
        - post
      summary: Get a post by ID
      description: Get a post
      operationId: getPostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The post ID to retrieve.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - post
      summary: Update a post by ID
      description: Update a post
      operationId: updatePostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The post ID that needs to be updated.'
          required: true
          schema:
            type: integer
      requestBody:
        description: The post content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - post
      summary: Delete a post by ID
      description: Delete a post
      operationId: deletePostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The post ID that needs to be deleted.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/like:
    post:
      tags:
        - post
      summary: Like a post
      description: Allows a user to like a post.
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to like
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/unlike:
    post:
      tags:
        - post
      summary: Unlike a post
      description: Allows a user to unlike a post.
      operationId: unlikePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to unlike
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post unliked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorized teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLog'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by a logged-in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      requestBody:
        description: Created cohort object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCohort'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortResponse'
        '400':
          description: Fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        username:
          type: string
        mobile:
          type: string
        specialism:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        profileImage:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        likedBy:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Cohort:
      type: object
      properties:
        id:
          type: integer
        cohortName:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    Log:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        cohortId:
          type: integer
        author:
          $ref: '#/components/schemas/User'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/LogLine'
    LogLine:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        username:
          type: string
        mobile:
          type: string
        specialism:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        password:
          type: string
        profileImage:
          type: string
    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        username:
          type: string
        mobile:
          type: string
        specialism:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        profileImage:
          type: string
    CreatePost:
      type: object
      properties:
        content:
          type: string
    UpdatePost:
      type: object
      properties:
        content:
          type: string
    CreateCohort:
      type: object
      properties:
        cohortName:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    CreateLog:
      type: object
      properties:
        date:
          type: string
        cohortId:
          type: integer
        lines:
          type: array
          items:
            type: object
            properties:
              content:
                type: string
    CreatedUser:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        username:
          type: string
        mobile:
          type: string
        specialism:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        profileImage:
          type: string
    AllUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/User'
    PostResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/Post'
    PostsResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    CohortResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/Cohort'
    LogResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/Log'
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string
