openapi: 3.0.3
info:
  title: Team Dev Frontend Server API
  description: |-
  version: 0.2.2

servers:
  - url: https://team-dev-backend-api-c9.fly.dev/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
  - name: comment
  - name: like

paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unable to create new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - user
      summary: Get all users by first name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Search all users by first and last name if provided (separated by '%20')
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '401':
          description: Invalid token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied
  /users/teachers:
    get:
      tags:
        - user
      summary: Get all Teachers
      description: Student and teachers can get list of teachers
      operationId: getAllTeachers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userid}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string

      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /posts/{postid}:             
    get:
      tags:
        - post
      summary: Get post by id
      description: get a post by its id
      operationId: getPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          id: id
          in: path
          description: 'The id that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - post
      summary: Update a post
      description: Only the original poster or a teacher can update the post
      operationId: postUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The post id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /post/{postid}:
    delete:
      tags:
        - post
      summary: delete post and its comments
      description: delete post by Id
      operationId: deletePost
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /cohorts:
    get:
      tags:
        - cohort
      summary: Get all cohorts
      description: This can only be done by the logged in user with role TEACHER.
      operationId: getAllCohorts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cohorts/{cohortid}/users:
    get:
      tags:
        - cohort
      summary: Get all Students in cohort
      description: This can only be done by a logged in user
      operationId: getAllStudentsOfCohort
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Cohort'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/comments:
    post:
      tags:
        - comment
      summary: Create a comment
      description: this can only be done by a logged in user
      operationId: createComment
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The post ID that the comment needs to be linked to. '
          required: true
          schema:
            type: string
      requestBody:
        description: Created Comment Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reqpostcomment'

      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resComment'
        400:
          description: must include content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: post must exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - comment
      summary: Get all comments on a post
      description: this can only be done by a logged in user
      operationId: GetAllComments
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The post ID of the post the comments are attached to '
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allComments'
        404:
          description: post does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
  /posts/{postid}/comments/{commentid}:
    patch:
      tags:
        - comment
      summary: update comment by comment Id
      description: this can only be done by a looged in user and the author of the comment
      operationId: updateCommentById
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: 'the comment ID of the comment '
          required: true
          schema:
            type: string
      requestBody:
        description: Updated Comment Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reqpostcomment'
      responses:
        200:
          description: success
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/resComment'
        400:
          description: must provide content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /post/{postid}/comments/{commentid}:
    delete:
      tags:
        - comment
      summary: Delete a comment from a post
      description: Delete comment by Id
      operationId: resComment
      security:
        - bearerAuth: []
      parameters:
        - name: PostId
          in: path
          description: 'The id of the post which is being liked. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resComment'
        '400':
          description: Fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/like:
    post:
      tags:
        - like
      summary: Like a Post
      description: This can only be done by a logged in user.
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - name: PostId
          in: path
          description: 'The id of the post which is being liked. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikePost'
        '401':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /post/{postid}/like:
    delete:
      tags:
        - like
      summary: Remove a like from a post
      description: This can only be done by a logged in user.
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - name: PostId
          in: path
          description: 'The id of the post which is being liked. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikePost'
        '400':
          description: Fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/comments/{commentid}/like:
    post:
      tags:
        - like
      summary: Like a comment
      description: This can only be done by a logged in user.
      operationId: LikeComment
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: 'The id of the post which is being commented on. Use 1 for testing.'
          required: true
        - name: commentId
          in: path
          description: 'The id of the comment which is being liked. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeComment'
        '400':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: You can not like a comment more than once.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /post/{postid}/comments/{commentid}/like:
    delete:
      tags:
        - like
      summary: Remove a like from a comment
      description: This can only be done by a logged in user.
      operationId: LikeComment
      security:
        - bearerAuth: []
      parameters:
        - name: PostId
          in: path
          description: 'The id of the post the comment belongs to. Use 1 for testing. '
          required: true
        - name: commentId
          in: path
          description: 'The id of the comment which is being un-liked. '
          required: true
          schema:
            type: string
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeComment'
        '400':
          description: Fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unable to verify user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You are not authorized to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string
                createdAt:
                  type: string
                  format: string
                updatedAt:
                  type: string
                  format: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    cohortId:
                      type: integer
                    role:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    bio:
                      type: string
                    githubUrl:
                      type: string
                    profileImageUrl:
                      type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string

    AllCohorts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/Cohort'

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        password:
          type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohortId:
                        type: integer
                      role:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      bio:
                        type: string
                      githubUrl:
                        type: string
                      profileImageUrl:
                        type: string

    LikePost:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            id:
              type: integer
            userId:
              type: integer
            postId:
              type: integer
            createdAt:
              type: string
              format: string

    LikeComment:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            id:
              type: integer
            userId:
              type: integer
            commentId:
              type: integer
            createdAt:
              type: string
              format: string

    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
    allComments:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/resComment'
    resComment:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            id:
              type: integer
            content:
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string
            author:
              type: object
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
                profileImageUrl:
                  type: string
    reqpostcomment:
      type: object
      properties:
        content:
          type: string
        userId:
          type: integer
      required:
        - content
        - userId
