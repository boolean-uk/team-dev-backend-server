openapi: 3.0.3
info:
  title: Team Dev Frontend Server API
  description: |-
  version: 0.2.2

servers:
  - url: https://team-dev-server-c10.fly.dev/
tags:
  - name: user
  - name: post
  - name: comment
  - name: cohort
  - name: log
  - name: note
paths:
  /comments/getComments:
    get:
      tags:
        - comment
      summary: Get comments by userId, postId or searchString
      description: 'Search for any combination of userId, postId and searchString. Returns any comments matching all provided search parameters.'
      operationId: getComments
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Search for all comments for a given userId if provided
          schema:
            type: integer
        - name: postId
          in: query
          description: Search for all comments for a given postId if provided
          schema:
            type: integer
        - name: searchString
          in: query
          description: Search for all comments containing the provided searchString (case insensitive)
          schema:
            type: string
      responses:
        '200':
          description: Success - Comments Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllComments'
        '400':
          description: Failure - No search parameters provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Failure - No comments found for given search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notes:
    post:
      tags:
        - note
      summary: Create note
      description: Create new note
      operationId: createNote
      requestBody:
        description: Note details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNote'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedNote'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - user
      summary: Get all users by first or last name, if provided.
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name if provided (exact string matches only)
          schema:
            type: string
        - name: lastName
          in: query
          description: Search all users by last name if provided (exact string matches only)
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - user
      summary: Create profile
      description: Create new profile
      operationId: createProfile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that is creating the profile'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfile'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedProfile'
        '400':
          description: Required fields not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Users can only create their own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Only one profile can be created per user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid Log in token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{postId}:
    delete:
      tags:
        - post
      summary: Deletes Selected Post
      description: Deletes Selected Post and Comments associated
      operationId: deletePost
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: User Not Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid Permission to delete post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    put:
      tags:
        - post
      summary: Update post
      description: The student can update only update their posts.
      operationId: editPost
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditPost'
        '403':
          description: Missing authorisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditError'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditError'
  /posts/{postId}/comments:
    post:
      tags:
        - comment
      summary: Create comment
      description: This can only be done by the logged in user.
      operationId: createComment
      security:
        - bearerAuth: []
      requestBody:
        description: Created comment object
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                userId:
                  type: integer
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Non-string comment, no comment, or comment > 240 characters provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - comment
      summary: Delete a comment by id
      description: Students can only delete their own comments. Teachers can delete comments by any user.
      operationId: deleteComment
      security:
        - bearerAuth: []
      requestBody:
        description: Deleted comment object
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        403:
          description: user does not have permission to remove comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: no comment with provided id was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}/like:
    post:
      tags:
        - post
      summary: Toggle Post Like
      description: Toggle like for a post. This can only be done by the logged-in user.
      operationId: togglePostLike
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: ID of the post to toggle the like for.
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Success, Like removed from post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPost'

        '201':
          description: Success (Created), Like added to post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPost'

        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/comments/{commentId}/like:
    post:
      tags:
        - comment
      summary: Toggle Comment Like
      description: Toggle like for a comment. This can only be done by the logged-in user.
      operationId: toggleCommentLike
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to toggle the like for.
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Success, Like removed from comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedComment'

        '201':
          description: Success (Created), Like added to comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedComment'

        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createDeliveryLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                title:
                  type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logs/{cohortId}:
    get:
      tags:
        - log
      summary: Get all delivery logs for a specific cohort by id
      description: This can only be done by an authorised teacher user.
      operationId: getDeliveryLog
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The cohorts logs that need to be fetched.
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Log'
        404:
          description: Cohort or delivery logs not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Cohort'

    get:
      tags:
        - cohort
      summary: Get all available cohorts and their users 
      description: This can only be done by an authorised teacher user.
      operationId: getAllCohorts
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/AllCohorts'
        404:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cohorts/{cohortId}:
    get:
      tags:
        - cohort
      summary: Get a specific cohort by id
      description: This can only be done by an authorised teacher user.
      operationId: getCohort
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Cohort'
        404:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string
    Comment:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            comment:
              properties:
                id:
                  type: integer
                content:
                  type: string
    CreateNote:
      type: object
      properties:
        content:
          type: string
        userId:
          type: integer

    Cohort:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string

    AllCohorts:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        password:
          type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        cohortId:
          type: integer
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    CreateProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: string
                  updatedAt:
                    type: string
                    format: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohortId:
                        type: integer
                      role:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      bio:
                        type: string
                      githubUrl:
                        type: string
                      profileImageUrl:
                        type: string
    CreatedNote:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            note:
              properties:
                id:
                  type: integer
                content:
                  type: string
                userId:
                  type: integer
    EditPost:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    EditError:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    LikedPost:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            like:
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                postId:
                  type: integer

                createdAt:
                  type: string
                  format: string
                updatedAt:
                  type: string
                  format: string
            liked:
              type: boolean

    LikedComment:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            like:
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                commentId:
                  type: integer
            liked:
              type: boolean

    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string

    CreatedProfile:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string

    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                title:
                  type: string
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
    AllComments:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                type: object
                properties:
                  postId:
                    type: integer
                  userId:
                    type: integer
                  content:
                    type: string
