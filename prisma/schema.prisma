generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  cohortId      Int?
  role          Role            @default(STUDENT)
  cohort        Cohort?         @relation(fields: [cohortId], references: [id])
  comments      Comment[]
  deliveryLogs  DeliveryLog[]
  likes         Like[]
  notes         Note[]
  posts         Post[]
  profile       Profile?
  UserExercises UserExercises[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  firstName String
  lastName  String
  bio       String?
  githubUrl String?
  user      User    @relation(fields: [userId], references: [id])
}

model Cohort {
  id           Int           @id @default(autoincrement())
  deliveryLogs DeliveryLog[]
  users        User[]
  courses      Course[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model DeliveryLog {
  id       Int               @id @default(autoincrement())
  date     DateTime
  userId   Int
  title    String
  user     User              @relation(fields: [userId], references: [id])
  cohortId Int
  cohort   Cohort            @relation(fields: [cohortId], references: [id])
  lines    DeliveryLogLine[]
}

model DeliveryLogLine {
  id      Int         @id @default(autoincrement())
  content String
  logId   Int
  log     DeliveryLog @relation(fields: [logId], references: [id])
}

model Note {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  modules   Module[]
  cohorts   Cohort[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Module {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  courses   Course[]
  units     Unit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Unit {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  moduleId  Int
  module    Module     @relation(fields: [moduleId], references: [id])
  exercises Exercise[]
  videos    Video[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
}

model Exercise {
  id            Int             @id @default(autoincrement())
  name          String
  unitId        Int
  unit          Unit            @relation(fields: [unitId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt()
  UserExercises UserExercises[]
}

model Video {
  id          Int      @id @default(autoincrement())
  unitId      Int
  unit        Unit     @relation(fields: [unitId], references: [id])
  name        String
  URL         String
  videoLength Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model UserExercises {
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  exerciseId  Int
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  isSubmitted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([userId, exerciseId])
}

enum Role {
  STUDENT
  TEACHER
}
