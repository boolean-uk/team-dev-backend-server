// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

enum Grade {
  NotSubmitted
  NotMarked
  NotPassingCore
  PassingCore
  PassingExtension
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  role            Role          @default(STUDENT)
  profile         Profile?
  cohortId        Int?
  cohort          Cohort?       @relation(fields: [cohortId], references: [id])
  posts           Post[]
  deliveryLogs    DeliveryLog[]
  commments       Comment[]
  likedPosts      LikePost[]
  likedComments   LikeComment[]      
  exercises       UserExercises[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  bio       String?
  githubUrl String?
}

model Cohort {
  id           Int           @id @default(autoincrement())
  users        User[]
  deliveryLogs DeliveryLog[]
  courseId     Int?
  course       Course?       @relation(fields: [courseId], references: [id])
}

model Post {
  id          Int           @id @default(autoincrement())
  content     String
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  commments   Comment[]
  likedPosts  LikePost[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DeliveryLog {
  id       Int               @id @default(autoincrement())
  date     DateTime
  title    String            @default("")
  userId   Int
  user     User              @relation(fields: [userId], references: [id])
  cohortId Int
  cohort   Cohort            @relation(fields: [cohortId], references: [id])
  lines    DeliveryLogLine[]
}

model DeliveryLogLine {
  id      Int         @id @default(autoincrement())
  content String
  logId   Int
  log     DeliveryLog @relation(fields: [logId], references: [id])
}

model Comment {
  id              Int             @id @default(autoincrement())
  content         String
  postId          Int
  post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  likedComments   LikeComment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model LikePost {
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  postId      Int
  post        Post      @relation(fields: [postId], references: [id])
  @@id([userId, postId])
}

model LikeComment {
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  commentId   Int
  comment     Comment     @relation(fields: [commentId], references: [id])
  @@id([userId, commentId])
}

model Course {
  id          Int       @id @default(autoincrement())
  courseName  String
  cohorts     Cohort[]
  modules     Module[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Module {
  id          Int       @id @default(autoincrement())
  moduleName  String
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  units       Unit[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id          Int         @id @default(autoincrement())
  unitName    String    
  moduleId    Int
  module      Module      @relation(fields: [moduleId], references: [id])
  exercises   Exercise[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Exercise {
  id            Int       @id @default(autoincrement())
  exerciseName  String
  unitId        Int
  unit          Unit      @relation(fields: [unitId], references: [id])
  userExercises UserExercises[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserExercises {
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  exerciseId    Int
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])
  isSubmitted   Boolean   @default(false)
  grade         Grade     @default(NotSubmitted)  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([userId, exerciseId])
}